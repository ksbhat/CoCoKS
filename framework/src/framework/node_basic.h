
/**
 * @file node_basic.h
 *
 * Functions to allocate node structures
 * 
 * THIS FILE HAS BEEN GENERATED USING 
 * $Id: node_basic.h.xsl 14593 2006-01-31 17:09:55Z cg $.
 * DO NOT EDIT THIS FILE AS MIGHT BE CHANGED IN A LATER VERSION.
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#ifndef _SAC_NODE_BASIC_H_
#define _SAC_NODE_BASIC_H_

#include "types.h"


#define _SAC_AST_VERSION_ "0.9"


/*****************************************************************************
 * macros and functions for N_const
 *****************************************************************************/

#define CONST_SET_CONST( n) ((n)->sons.N_const->Set_Const)
extern node *TBmakeConst (node * Set_Const);

/*****************************************************************************
 * macros and functions for N_statement
 *****************************************************************************/

#define STATEMENT_SET_STATEMENT( n) ((n)->sons.N_statement->Set_Statement)
extern node *TBmakeStatement (node * Set_Statement);

/*****************************************************************************
 * macros and functions for N_program
 *****************************************************************************/

#define PROGRAM_CODEBLOCK( n) ((n)->sons.N_program->CodeBlock)
#define PROGRAM_NEXT( n) ((n)->sons.N_program->Next)
extern node *TBmakeProgram (node * CodeBlock, node * Next);

/*****************************************************************************
 * macros and functions for N_vardec
 *****************************************************************************/

#define VARDEC_TYPE( n) ((n)->sons.N_vardec->Type)
#define VARDEC_VAR( n) ((n)->sons.N_vardec->Var)
#define VARDEC_EXPR( n) ((n)->sons.N_vardec->Expr)
extern node *TBmakeVardec (node * Type, node * Var, node * Expr);

/*****************************************************************************
 * macros and functions for N_param
 *****************************************************************************/

#define PARAM_TYPE( n) ((n)->sons.N_param->Type)
#define PARAM_VAR( n) ((n)->sons.N_param->Var)
extern node *TBmakeParam (node * Type, node * Var);

/*****************************************************************************
 * macros and functions for N_type
 *****************************************************************************/

#define TYPE_SET_TYPE( n) ((n)->sons.N_type->Set_Type)
extern node *TBmakeType (node * Set_Type);

/*****************************************************************************
 * macros and functions for N_extern
 *****************************************************************************/

#define EXTERN_VALUE( n) ((n)->attribs.N_extern->Value)
extern node *TBmakeExtern (keyword Value);

/*****************************************************************************
 * macros and functions for N_export
 *****************************************************************************/

#define EXPORT_VALUE( n) ((n)->attribs.N_export->Value)
extern node *TBmakeExport (keyword Value);

/*****************************************************************************
 * macros and functions for N_for
 *****************************************************************************/

#define FOR_VALUE( n) ((n)->attribs.N_for->Value)
extern node *TBmakeFor (keyword Value);

/*****************************************************************************
 * macros and functions for N_equals
 *****************************************************************************/

#define EQUALS_VALUE( n) ((n)->attribs.N_equals->Value)
extern node *TBmakeEquals (keyword Value);

/*****************************************************************************
 * macros and functions for N_ifkeyword
 *****************************************************************************/

#define IFKEYWORD_VALUE( n) ((n)->attribs.N_ifkeyword->Value)
extern node *TBmakeIfkeyword (keyword Value);

/*****************************************************************************
 * macros and functions for N_l_fl_bracket
 *****************************************************************************/

#define L_FL_BRACKET_VALUE( n) ((n)->attribs.N_l_fl_bracket->Value)
extern node *TBmakeL_fl_bracket (keyword Value);

/*****************************************************************************
 * macros and functions for N_r_fl_bracket
 *****************************************************************************/

#define R_FL_BRACKET_VALUE( n) ((n)->attribs.N_r_fl_bracket->Value)
extern node *TBmakeR_fl_bracket (keyword Value);

/*****************************************************************************
 * macros and functions for N_l_bracket
 *****************************************************************************/

#define L_BRACKET_VALUE( n) ((n)->attribs.N_l_bracket->Value)
extern node *TBmakeL_bracket (keyword Value);

/*****************************************************************************
 * macros and functions for N_r_bracket
 *****************************************************************************/

#define R_BRACKET_VALUE( n) ((n)->attribs.N_r_bracket->Value)
extern node *TBmakeR_bracket (keyword Value);

/*****************************************************************************
 * macros and functions for N_key_void
 *****************************************************************************/

#define KEY_VOID_VALUE( n) ((n)->attribs.N_key_void->Value)
extern node *TBmakeKey_void (keyword Value);

/*****************************************************************************
 * macros and functions for N_key_int
 *****************************************************************************/

#define KEY_INT_VALUE( n) ((n)->attribs.N_key_int->Value)
extern node *TBmakeKey_int (keyword Value);

/*****************************************************************************
 * macros and functions for N_key_float
 *****************************************************************************/

#define KEY_FLOAT_VALUE( n) ((n)->attribs.N_key_float->Value)
extern node *TBmakeKey_float (keyword Value);

/*****************************************************************************
 * macros and functions for N_key_bool
 *****************************************************************************/

#define KEY_BOOL_VALUE( n) ((n)->attribs.N_key_bool->Value)
extern node *TBmakeKey_bool (keyword Value);

/*****************************************************************************
 * macros and functions for N_fundec
 *****************************************************************************/

#define FUNDEC_EXTERN( n) ((n)->sons.N_fundec->Extern)
#define FUNDEC_FUNHEADER( n) ((n)->sons.N_fundec->FunHeader)
extern node *TBmakeFundec (node * Extern, node * FunHeader);

/*****************************************************************************
 * macros and functions for N_funheader
 *****************************************************************************/

#define FUNHEADER_RETTYPE( n) ((n)->sons.N_funheader->RetType)
#define FUNHEADER_VAR( n) ((n)->sons.N_funheader->Var)
#define FUNHEADER_PARAMLIST( n) ((n)->sons.N_funheader->ParamList)
extern node *TBmakeFunheader (node * RetType, node * Var, node * ParamList);

/*****************************************************************************
 * macros and functions for N_rettype
 *****************************************************************************/

#define RETTYPE_SET_RETTYPE( n) ((n)->sons.N_rettype->Set_RetType)
extern node *TBmakeRettype (node * Set_RetType);

/*****************************************************************************
 * macros and functions for N_paramlist
 *****************************************************************************/

#define PARAMLIST_PARAM( n) ((n)->sons.N_paramlist->Param)
#define PARAMLIST_NEXT( n) ((n)->sons.N_paramlist->Next)
extern node *TBmakeParamlist (node * Param, node * Next);

/*****************************************************************************
 * macros and functions for N_fundef
 *****************************************************************************/

#define FUNDEF_EXPORT( n) ((n)->sons.N_fundef->Export)
#define FUNDEF_FUNHEADER( n) ((n)->sons.N_fundef->FunHeader)
#define FUNDEF_FUNBODY( n) ((n)->sons.N_fundef->FunBody)
extern node *TBmakeFundef (node * Export, node * FunHeader, node * FunBody);

/*****************************************************************************
 * macros and functions for N_funbody
 *****************************************************************************/

extern node *TBmakeFunbody ();

/*****************************************************************************
 * macros and functions for N_globaldef
 *****************************************************************************/

#define GLOBALDEF_EXPORT( n) ((n)->sons.N_globaldef->Export)
#define GLOBALDEF_TYPE( n) ((n)->sons.N_globaldef->Type)
#define GLOBALDEF_VAR( n) ((n)->sons.N_globaldef->Var)
#define GLOBALDEF_EXPR( n) ((n)->sons.N_globaldef->Expr)
extern node *TBmakeGlobaldef (node * Export, node * Type, node * Var,
			      node * Expr);

/*****************************************************************************
 * macros and functions for N_globaldec
 *****************************************************************************/

#define GLOBALDEC_EXTERN( n) ((n)->sons.N_globaldec->Extern)
#define GLOBALDEC_TYPE( n) ((n)->sons.N_globaldec->Type)
#define GLOBALDEC_VAR( n) ((n)->sons.N_globaldec->Var)
extern node *TBmakeGlobaldec (node * Extern, node * Type, node * Var);

/*****************************************************************************
 * macros and functions for N_vardeclist
 *****************************************************************************/

#define VARDECLIST_VARDEC( n) ((n)->sons.N_vardeclist->VarDec)
#define VARDECLIST_NEXT( n) ((n)->sons.N_vardeclist->Next)
extern node *TBmakeVardeclist (node * VarDec, node * Next);

/*****************************************************************************
 * macros and functions for N_return
 *****************************************************************************/

#define RETURN_RETURNKEYWORD( n) ((n)->sons.N_return->ReturnKeyword)
#define RETURN_EXPR( n) ((n)->sons.N_return->Expr)
extern node *TBmakeReturn (node * ReturnKeyword, node * Expr);

/*****************************************************************************
 * macros and functions for N_returnkeyword
 *****************************************************************************/

#define RETURNKEYWORD_VALUE( n) ((n)->attribs.N_returnkeyword->Value)
extern node *TBmakeReturnkeyword (keyword Value);

/*****************************************************************************
 * macros and functions for N_statementlist
 *****************************************************************************/

#define STATEMENTLIST_STATEMENT( n) ((n)->sons.N_statementlist->Statement)
#define STATEMENTLIST_NEXT( n) ((n)->sons.N_statementlist->Next)
extern node *TBmakeStatementlist (node * Statement, node * Next);

/*****************************************************************************
 * macros and functions for N_dowhilestat
 *****************************************************************************/

#define DOWHILESTAT_DO( n) ((n)->sons.N_dowhilestat->Do)
#define DOWHILESTAT_BLOCK( n) ((n)->sons.N_dowhilestat->Block)
#define DOWHILESTAT_WHILE( n) ((n)->sons.N_dowhilestat->While)
#define DOWHILESTAT_EXPR( n) ((n)->sons.N_dowhilestat->Expr)
extern node *TBmakeDowhilestat (node * Do, node * Block, node * While,
				node * Expr);

/*****************************************************************************
 * macros and functions for N_do
 *****************************************************************************/

#define DO_VALUE( n) ((n)->attribs.N_do->Value)
extern node *TBmakeDo (keyword Value);

/*****************************************************************************
 * macros and functions for N_while
 *****************************************************************************/

#define WHILE_VALUE( n) ((n)->attribs.N_while->Value)
extern node *TBmakeWhile (keyword Value);

/*****************************************************************************
 * macros and functions for N_whilestat
 *****************************************************************************/

#define WHILESTAT_WHILE( n) ((n)->sons.N_whilestat->While)
#define WHILESTAT_EXPR( n) ((n)->sons.N_whilestat->Expr)
#define WHILESTAT_BLOCK( n) ((n)->sons.N_whilestat->Block)
extern node *TBmakeWhilestat (node * While, node * Expr, node * Block);

/*****************************************************************************
 * macros and functions for N_forstat
 *****************************************************************************/

#define FORSTAT_FOR( n) ((n)->sons.N_forstat->For)
#define FORSTAT_FORDEC( n) ((n)->sons.N_forstat->ForDec)
#define FORSTAT_BLOCK( n) ((n)->sons.N_forstat->Block)
extern node *TBmakeForstat (node * For, node * ForDec, node * Block);

/*****************************************************************************
 * macros and functions for N_fordec
 *****************************************************************************/

#define FORDEC_TYPE( n) ((n)->sons.N_fordec->Type)
#define FORDEC_FORVARINIT( n) ((n)->sons.N_fordec->ForVarInit)
#define FORDEC_EXPR( n) ((n)->sons.N_fordec->Expr)
extern node *TBmakeFordec (node * Type, node * ForVarInit, node * Expr);

/*****************************************************************************
 * macros and functions for N_forvarinit
 *****************************************************************************/

#define FORVARINIT_VARLET( n) ((n)->sons.N_forvarinit->VarLet)
#define FORVARINIT_EQUALS( n) ((n)->sons.N_forvarinit->Equals)
#define FORVARINIT_EXPR( n) ((n)->sons.N_forvarinit->Expr)
extern node *TBmakeForvarinit (node * VarLet, node * Equals, node * Expr);

/*****************************************************************************
 * macros and functions for N_funcall
 *****************************************************************************/

#define FUNCALL_VAR( n) ((n)->sons.N_funcall->Var)
#define FUNCALL_EXPRLIST( n) ((n)->sons.N_funcall->ExprList)
extern node *TBmakeFuncall (node * Var, node * ExprList);

/*****************************************************************************
 * macros and functions for N_exprlist
 *****************************************************************************/

#define EXPRLIST_EXPR( n) ((n)->sons.N_exprlist->Expr)
#define EXPRLIST_NEXT( n) ((n)->sons.N_exprlist->Next)
extern node *TBmakeExprlist (node * Expr, node * Next);

/*****************************************************************************
 * macros and functions for N_ifstat
 *****************************************************************************/

#define IFSTAT_IF( n) ((n)->sons.N_ifstat->If)
#define IFSTAT_L_BRACKET( n) ((n)->sons.N_ifstat->L_Bracket)
#define IFSTAT_EXPR( n) ((n)->sons.N_ifstat->Expr)
#define IFSTAT_R_BRACKET( n) ((n)->sons.N_ifstat->R_Bracket)
#define IFSTAT_BLOCK( n) ((n)->sons.N_ifstat->Block)
#define IFSTAT_ELSEBLOCK( n) ((n)->sons.N_ifstat->ElseBlock)
extern node *TBmakeIfstat (node * If, node * L_Bracket, node * Expr,
			   node * R_Bracket, node * Block, node * ElseBlock);

/*****************************************************************************
 * macros and functions for N_elseblock
 *****************************************************************************/

#define ELSEBLOCK_ELSE( n) ((n)->sons.N_elseblock->Else)
#define ELSEBLOCK_BLOCK( n) ((n)->sons.N_elseblock->Block)
extern node *TBmakeElseblock (node * Else, node * Block);

/*****************************************************************************
 * macros and functions for N_else
 *****************************************************************************/

#define ELSE_VALUE( n) ((n)->attribs.N_else->Value)
extern node *TBmakeElse (keyword Value);

/*****************************************************************************
 * macros and functions for N_enclosedblock
 *****************************************************************************/

#define ENCLOSEDBLOCK_L_FL_BRACKET( n) ((n)->sons.N_enclosedblock->L_FL_Bracket)
#define ENCLOSEDBLOCK_STATEMENTLIST( n) ((n)->sons.N_enclosedblock->StatementList)
#define ENCLOSEDBLOCK_R_FL_BRACKET( n) ((n)->sons.N_enclosedblock->R_FL_Bracket)
extern node *TBmakeEnclosedblock (node * L_FL_Bracket, node * StatementList,
				  node * R_FL_Bracket);

/*****************************************************************************
 * macros and functions for N_assign
 *****************************************************************************/

#define ASSIGN_LET( n) ((n)->sons.N_assign->Let)
#define ASSIGN_EXPR( n) ((n)->sons.N_assign->Expr)
extern node *TBmakeAssign (node * Let, node * Expr);

/*****************************************************************************
 * macros and functions for N_binop
 *****************************************************************************/

#define BINOP_LEFT( n) ((n)->sons.N_binop->Left)
#define BINOP_RIGHT( n) ((n)->sons.N_binop->Right)
#define BINOP_OP( n) ((n)->attribs.N_binop->Op)
extern node *TBmakeBinop (binop Op, node * Left, node * Right);

/*****************************************************************************
 * macros and functions for N_monop
 *****************************************************************************/

#define MONOP_RIGHT( n) ((n)->sons.N_monop->Right)
#define MONOP_OP( n) ((n)->attribs.N_monop->Op)
extern node *TBmakeMonop (monop Op, node * Right);

/*****************************************************************************
 * macros and functions for N_cast
 *****************************************************************************/

#define CAST_L_BRACKET( n) ((n)->sons.N_cast->L_Bracket)
#define CAST_TYPE( n) ((n)->sons.N_cast->Type)
#define CAST_R_BRACKET( n) ((n)->sons.N_cast->R_Bracket)
#define CAST_EXPR( n) ((n)->sons.N_cast->Expr)
extern node *TBmakeCast (node * L_Bracket, node * Type, node * R_Bracket,
			 node * Expr);

/*****************************************************************************
 * macros and functions for N_enclosedexpr
 *****************************************************************************/

#define ENCLOSEDEXPR_L_BRACKET( n) ((n)->sons.N_enclosedexpr->L_Bracket)
#define ENCLOSEDEXPR_EXPR( n) ((n)->sons.N_enclosedexpr->Expr)
#define ENCLOSEDEXPR_R_BRACKET( n) ((n)->sons.N_enclosedexpr->R_Bracket)
extern node *TBmakeEnclosedexpr (node * L_Bracket, node * Expr,
				 node * R_Bracket);

/*****************************************************************************
 * macros and functions for N_varlet
 *****************************************************************************/

#define VARLET_NAME( n) ((n)->attribs.N_varlet->Name)
#define VARLET_DECL( n) ((n)->attribs.N_varlet->Decl)
extern node *TBmakeVarlet (char *Name);

/*****************************************************************************
 * macros and functions for N_var
 *****************************************************************************/

#define VAR_NAME( n) ((n)->attribs.N_var->Name)
#define VAR_DECL( n) ((n)->attribs.N_var->Decl)
extern node *TBmakeVar (char *Name);

/*****************************************************************************
 * macros and functions for N_num
 *****************************************************************************/

#define NUM_VALUE( n) ((n)->attribs.N_num->Value)
extern node *TBmakeNum (int Value);

/*****************************************************************************
 * macros and functions for N_float
 *****************************************************************************/

#define FLOAT_VALUE( n) ((n)->attribs.N_float->Value)
extern node *TBmakeFloat (float Value);

/*****************************************************************************
 * macros and functions for N_bool
 *****************************************************************************/

#define BOOL_VALUE( n) ((n)->attribs.N_bool->Value)
extern node *TBmakeBool (bool Value);

/*****************************************************************************
 * macros and functions for N_error
 *****************************************************************************/

#define ERROR_NEXT( n) ((n)->sons.N_error->Next)
#define ERROR_MESSAGE( n) ((n)->attribs.N_error->message)
#define ERROR_ANYPHASE( n) ((n)->attribs.N_error->anyphase)
extern node *TBmakeError (char *message, compiler_phase_t anyphase,
			  node * Next);

#endif /* _SAC_NODE_BASIC_H_ */
